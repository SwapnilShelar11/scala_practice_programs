[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\SWAPNI~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\SWAPNI~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 158.4739ms
[debug]       Load.loadUnit: defsScala took 0.4528ms
[debug] [Loading] Scanning directory C:\Users\Swapnil Shelar\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Swapnil Shelar\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 24.3872 ms
[debug]           Load.resolveProject(global-plugins) took 96.7802ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Swapnil Shelar\.sbt\1.0\plugins, plugins: List(<none>))) took 191.9285ms
[debug] [Loading] Done in C:\Users\Swapnil Shelar\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 222.9546ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3962ms
[debug]     Load.loadUnit(file:/C:/Users/Swapnil%20Shelar/.sbt/1.0/plugins/, ...) took 394.3629ms
[debug]   Load.apply: load took 642.1138ms
[debug]   Load.apply: resolveProjects took 7.6788ms
[debug]   Load.apply: finalTransforms took 82.4315ms
[debug]   Load.apply: config.delegates took 11.003ms
[debug]   Load.apply: Def.make(settings)... took 706.8293ms
[debug]   Load.apply: structureIndex took 128.6954ms
[debug]   Load.apply: mkStreams took 2.0202ms
[info] loading global plugins from C:\Users\Swapnil Shelar\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 76597.4466ms
[debug]           Load.loadUnit: plugins took 65.3677ms
[debug]           Load.loadUnit: defsScala took 0.0086ms
[debug] [Loading] Scanning directory C:\Users\Swapnil Shelar\IdeaProjects\Practice_Project\project
[debug]             Load.loadUnit: mkEval took 22.5413ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Swapnil Shelar\IdeaProjects\Practice_Project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 43.2362 ms
[info] loading settings for project practice_project-build from idea.sbt ...
[debug]               Load.resolveProject(practice_project-build) took 37.942ms
[debug]             Load.loadTransitive: finalizeProject(Project(id practice_project-build, base: C:\Users\Swapnil Shelar\IdeaProjects\Practice_Project\project, plugins: List(<none>))) took 82.9579ms
[debug] [Loading] Done in C:\Users\Swapnil Shelar\IdeaProjects\Practice_Project\project, returning: (practice_project-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4764.2707ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.5951ms
[debug]         Load.loadUnit(file:/C:/Users/Swapnil%20Shelar/IdeaProjects/Practice_Project/project/, ...) took 4839.8105ms
[debug]       Load.apply: load took 4855.6868ms
[debug]       Load.apply: resolveProjects took 0.6728ms
[debug]       Load.apply: finalTransforms took 30.2457ms
[debug]       Load.apply: config.delegates took 0.3509ms
[debug]       Load.apply: Def.make(settings)... took 325.0366ms
[debug]       Load.apply: structureIndex took 75.8862ms
[debug]       Load.apply: mkStreams took 0.0034ms
[info] loading project definition from C:\Users\Swapnil Shelar\IdeaProjects\Practice_Project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 9884.0625ms
[debug]     Load.loadUnit: defsScala took 0.0047ms
[debug] [Loading] Scanning directory C:\Users\Swapnil Shelar\IdeaProjects\Practice_Project
[debug]       Load.loadUnit: mkEval took 2.3868ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Swapnil Shelar\IdeaProjects\Practice_Project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.3195 ms
[info] loading settings for project practice_project from build.sbt ...
[debug]         Load.resolveProject(practice_project) took 47.6431ms
[debug]       Load.loadTransitive: finalizeProject(Project(id practice_project, base: C:\Users\Swapnil Shelar\IdeaProjects\Practice_Project, plugins: List(<none>))) took 53.4085ms
[debug] [Loading] Done in C:\Users\Swapnil Shelar\IdeaProjects\Practice_Project, returning: (practice_project)
[debug]     Load.loadUnit: loadedProjectsRaw took 2244.3815ms
[debug]     Load.loadUnit: cleanEvalClasses took 77.2691ms
[debug]   Load.loadUnit(file:/C:/Users/Swapnil%20Shelar/IdeaProjects/Practice_Project/, ...) took 12207.1071ms
[debug] Load.apply: load took 12209.1139ms
[debug] Load.apply: resolveProjects took 0.1135ms
[debug] Load.apply: finalTransforms took 28.1763ms
[debug] Load.apply: config.delegates took 0.3685ms
[debug] Load.apply: Def.make(settings)... took 100.8652ms
[debug] Load.apply: structureIndex took 22.9914ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to Practice_Project (in build file:/C:/Users/Swapnil%20Shelar/IdeaProjects/Practice_Project/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49809 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49809, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Practice_Project (in build file:/C:/Users/Swapnil%20Shelar/IdeaProjects/Practice_Project/)
[debug] > Exec(idea-shell, None, None)
